# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

blackjack = simplegui.load_image("http://www.dragonplay.com/images/BlackJack-895.png")
# initialize some useful global variables
in_play = False
outcome = ""
score = 0
begin = True
special = ""
tem = True

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                        CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
            
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.card_list=[]

    def __str__(self):
        tem = ""
        if len(self.card_list)==0:
            return "Hand contains "
        else:
            for i in range(0,len(self.card_list)):
                tem += str(self.card_list[i])+" "
        return "Hand contains "+tem


    def add_card(self, card):
        global tem
        # add a card object to a hand
        if new_deck.rest_card() !=0:
            self.card_list.append(str(card))
        else:
            tem = False

    def reset(self):
        self.card_list = []
    
    def restart(self):
        global in_play, new_deck
        in_play = True
        if new_deck.rest_card() != 0:
            self.add_card(new_deck.deal_card())
        
    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        
        total_value = 0
        value = 0
        tem = []
        for i in range(0,len(self.card_list)):
            tem.append(self.card_list[i][1])
           
            if self.card_list[i][1] in ["T", "J", "Q", "K"]:
                    
                value = 10
                total_value += value
            elif self.card_list[i][1] in "A":
                    
                value = 1
                total_value += value                
            else: 
                value = int(self.card_list[i][1])
                total_value += value
        if "A" in tem and total_value+10 <= 21:
            total_value += 10            
            
        return total_value
            
    def draw(self, canvas, pos):
        if len(self.card_list) > 5:
            for i in range(0,5):
                pic = Card(self.card_list[i][0],self.card_list[i][1])
                pic.draw(canvas,pos)
                pos[0] += CARD_SIZE[0]
        else:
            for i in range(0,len(self.card_list)):
                pic = Card(self.card_list[i][0],self.card_list[i][1])
                pic.draw(canvas,pos)
                pos[0] += CARD_SIZE[0]

# define deck class 
class Deck:
    def __init__(self):
        # create a Deck object
        self.deck_card = [str(x)+str(y) for x in SUITS for y in RANKS]
        
    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.deck_card)    # use random.shuffle()
    
    def deck_clean(self):
        self.deck_card = []
        
    def deck_reset(self):
        self.deck_card = [str(x)+str(y) for x in SUITS for y in RANKS]
        
    def deal_card(self):
        global in_play
        if self.rest_card() != 0:
            return self.deck_card.pop(len(self.deck_card)-1)
        elif self.rest_card()==0:
            outcome = "No cards"
            in_play=False
            # deal a card object from the deck
    def rest_card(self):
        return len(self.deck_card)
    
    def __str__(self):
        tem2 = ""
        if len(self.deck_card)==0:
            return "Deck contains "
        else:
            for i in range(0,len(self.deck_card)):
                tem2 += str(self.deck_card[i])+" "
        return "Deck contains "+tem2	# return a string representing the deck

#define event handlers for buttons
def deal():
    global special, in_play,new_deck,begin,score,tem
    if new_deck.rest_card() == 0:
        new_deck.deck_reset()
        new_deck.shuffle()
    elif new_deck.rest_card() > 0 and new_deck.rest_card()<4:
        tem = False
    if begin == True:
        new_deck.shuffle()
    if new_deck.rest_card() > 0 and begin==False and in_play==True:
        special = "You gave up in the last round!You lost!!"
        score -= 1
    player.reset()
    dealer.reset()
    dealer.add_card(new_deck.deal_card())
    player.add_card(new_deck.deal_card())
    dealer.add_card(new_deck.deal_card())
    player.add_card(new_deck.deal_card())
    print "player's "  + str(player)
    print "dealer's "  + str(dealer)
    in_play = True
    begin = False
    tem = True
    
def hit():
    global in_play,new_deck,score,special,outcome
    special = ""
    if in_play and new_deck.rest_card()>0:
        if player.get_value() <= 21:
            player.add_card(new_deck.deal_card())
            if player.get_value() > 21:               
                outcome = "You have busted!You lose!"
                score -= 1
                in_play = False
    elif new_deck.rest_card() == 0:
        outcome = "No cards"
        in_play=False
    print player
                
    # replace with your code below
 
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
       
def stand():
    global in_play,outcome,score
    if in_play:
        if player.get_value() <= 21:
            while dealer.get_value() < 17:
                dealer.add_card(new_deck.deal_card())
                print dealer
        if dealer.get_value() > 21:
            outcome = "Dealer has busted!You win!!"
            score += 1
        elif dealer.get_value() <= 21:
            if player.get_value() > dealer.get_value() and player.get_value()<= 21:
                outcome = "You win!!"
                score += 1
            else:
                outcome = "You lose!!"
                score -= 1
        in_play=False

def restart():
    global score
    new_deck.deck_clean()
    deal()
    score = 0
    begin = True

# draw handler    
def draw(canvas):
    global tem
    # test to make sure that card.draw works, replace with your code below    
    #canvas.draw_text("BlackJack 21", (50, 70), 45, 'yellow')
    
    canvas.draw_text("Score: "+str(score), (400, 40), 20, 'white')
    canvas.draw_text("Rest card number:" + str(new_deck.rest_card()),(400, 60), 20, 'white')
    canvas.draw_text(special, (100, 590), 20, 'yellow')
    canvas.draw_image(blackjack,[895/2,335/2],[895,335], [150, 50], [250,80])
    if new_deck.rest_card() >0 and tem:
        player.draw(canvas, [50, 400])
        dealer.draw(canvas,	[50, 100])
        if in_play:
            canvas.draw_image(card_back, CARD_BACK_CENTER,CARD_BACK_SIZE, [16 + CARD_BACK_SIZE[0], 100 + CARD_BACK_CENTER[1]], CARD_BACK_SIZE)
            canvas.draw_text("You current value is "+ str(player.get_value()), (100, 300), 45, 'white')
            canvas.draw_text("Hit or Stand?", (80, 550), 45, 'white')
        elif in_play == False:
            canvas.draw_text("Your value is "+ str(player.get_value()), (100, 300), 45, 'white')
            canvas.draw_text("Dealer's value is "+ str(dealer.get_value()), (100, 350), 45, 'white')
            canvas.draw_text(outcome,(50,550),45,"white")
            canvas.draw_text("Press Deal to start a new round!",(300,570),20,"yellow")
    elif new_deck.rest_card()==0 or tem == False:
        tem = False
        canvas.draw_text("No cards!!!",(150, 300), 60, 'yellow')

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("#005200")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.add_button("Restart",restart,200)
frame.set_draw_handler(draw)


# get things rolling
player = Hand()
dealer = Hand()
new_deck=Deck()
deal()
frame.start()


# remember to review the gradic rubric
