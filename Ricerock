# program template for Spaceship
import simplegui
import math
import random

##------------!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

## PLEASE NOTICE HERE!!

## I USED CHROME TO CODE THE GAME. SO YOU NEED TO USE CHROME TO HEAR THE SOUND.

## THANK YOU FOR YOUR EVALUATION FOR MY GAME.

##---------!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0.5
thrust = False
started = False
ship_explode = False
interval = 0.5
interval2 = 0
direction = [-random.random()+0.5,-random.random()+0.5]
change = [-random.random()*WIDTH,-random.random()*HEIGHT]
circle = (-random.random()+0.5)/8
class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2013.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 2, 80)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 80, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

ship_explode_info = ImageInfo([128,128], [256,256],34,80,True)
ship_explode_image = simplegui.load_image("http://april-young.com/home/wp-content/uploads/2012/04/Explosion1spritesheet.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [0.2*math.cos(ang), 0.2*math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)

#function process_sprite_group takes a set and a canvas 
#and call the update and draw methods for each sprite in the group.

def process_sprite_group(stuff,canvas):   
    for rock in stuff:
        rock.draw(canvas)
    
    for rock in stuff:
        rock.update()
    
    # draw the missile
    for mis in stuff:
        mis.draw(canvas)    
    
    for mis in stuff:
        if mis.update():
            mis.update()
        else: stuff.remove(mis)
    
    
    for m in explosion_group:
        if m.update():
            m.draw(canvas)
    for n in shipep_group:
        if n.update():
            n.draw(canvas)
#group_collide help function to check whether there is a collision (1 to many)
def group_collide(ship,rock):
    global ship_explode,score
    removes = set()
    for i in rock:
        if i.collide(ship):
            removes.add(i)
            ship_explode=True
            if score!=0:
                score -= 100
            ship_explosion = Sprite(ship.get_position(), [0,0],0,0,ship_explode_image,ship_explode_info,explosion_sound)
            shipep_group.add(ship_explosion)
    rock.difference_update(removes)
    return len(removes)
#group_group collide function (many to many)
def group_group_collide(mis,rock):
    global score,ship_explode
    removes = set()
    for i in mis:
        for j in rock:
            if i.collide(j):
                removes.add(i)
                mis.difference_update(removes)
                rock.remove(j)
                ship_explode=False
                rock_explosion = Sprite(j.get_position(), [0,0],0,0,explosion_image,explosion_info,explosion_sound)
                explosion_group.add(rock_explosion)
                
                score += 100
                
def click(pos):
    global lives,rock_group,missile_group,shipep_group,explosion_group,started,score
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True            
    score = 0
    lives = 3
    started = True
    rock_group=set()
    missile_group=set()
    shipep_group=set()
    explosion_group=set()
    soundtrack.rewind()
    soundtrack.play()
    
# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
    
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def draw(self,canvas):
        canvas.draw_image(self.image, self.image_center,self.image_size, self.pos,self.image_size, self.angle)
    def draw2(self,canvas):
        canvas.draw_image(self.image, [self.image_center[0]+90,self.image_center[1]],self.image_size, self.pos,self.image_size, self.angle)
        
    def update(self):
        global forward
        forward = angle_to_vector(my_ship.angle)
        self.angle += self.angle_vel
        if thrust:
            self.vel[0] += forward[0]
            self.vel[1] += forward[1]
        my_ship.pos[0] += my_ship.vel[0]
        my_ship.pos[1] += my_ship.vel[1]
        self.vel[0] *= 0.9855
        self.vel[1] *= 0.9855
        if self.pos[0] > 800:
            self.pos[0] -= 800
        elif self.pos[0] < 0:
            self.pos[0] += 800
        elif self.pos[1] > 600:
            self.pos[1] -= 600
        elif self.pos[1] <0:
            self.pos[1] += 600
        
        ship_thrust_sound.play()
        
        if thrust==False:
            ship_thrust_sound.pause()
            
    def shoot(self):
        
        forward2 = angle_to_vector(self.angle)
        
        missile_vel = [self.vel[0] + 20 * forward[0], self.vel[1] + 20 * forward[1]]
        a_missile = Sprite([my_ship.pos[0]+45*(forward[0]/0.2),my_ship.pos[1]+45*(forward[1]/0.2)],missile_vel, 0, 0, missile_image, missile_info, missile_sound)
        
        missile_group.add(a_missile)
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
    
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def draw(self, canvas):
        global interval,interval2
        if self.animated == False:
            canvas.draw_image(self.image, self.image_center,self.image_size, self.pos,[self.image_size[0]/1.4,self.image_size[1]/1.4], self.angle)
        elif self.animated:
            if ship_explode:
                dim = [8,6]
                explosion_center = [128,128]
                current_index = [(interval2 % dim[0]) // 1, (interval2 // dim[0]) % dim[1]]
                current_center = [self.image_center[0] + current_index[0] * self.image_size[0], 
                                  self.image_center[1] + current_index[1] * self.image_size[1]]
                
                canvas.draw_image(self.image, current_center,self.image_size, self.pos,self.image_size)
                interval2 += 0.42
            else:
                current_index = (interval % 24) // 1
                current_center = [self.image_center[0] + current_index * self.image_size[0], self.image_center[1]]
                canvas.draw_image(self.image, current_center,self.image_size, self.pos,self.image_size)
                interval += 0.28
                
    def update(self):
        self.angle += self.angle_vel
        self.pos[0] += self.vel[0]
        self.pos[1] += self.vel[1] 
        if self.pos[0] > 800:
            self.pos[0] -= 800
        elif self.pos[0] < 0:
            self.pos[0] += 800
        elif self.pos[1] > 600:
            self.pos[1] -= 600
        elif self.pos[1] <0:
            self.pos[1] += 600
        self.age += 1
        if self.age < self.lifespan:
            return True
        else: return False
        
    def collide(self, sprite2):
        sprite1_pos = self.pos
        sprite1_radius = self.radius
        sprite2_pos = sprite2.get_position()
        sprite2_radius = sprite2.get_radius()
        
        if dist(sprite1_pos,sprite2_pos) < sprite1_radius+sprite2_radius:
            return True
        else: return False
        
           
def draw(canvas):
    global time,lives,started,score
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_text('Lives: '+str(lives), (20, 40), 30, 'White')
    canvas.draw_text('Score: '+str(score), (630, 40), 30, 'White')
    if started:
    # draw ship and sprites
        if thrust:
            my_ship.draw2(canvas)
        else:
            my_ship.draw(canvas)

    # draw the rock group
        process_sprite_group(rock_group,canvas)
        process_sprite_group(missile_group,canvas)
        # update ship and sprites
        my_ship.update()
        
        group_group_collide(missile_group,rock_group)
        
        if group_collide(my_ship,rock_group) != 0:
            if lives != 0:
                lives -= 1
            elif lives == 0:
                started = False
     
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                       splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                       splash_info.get_size())
       
# timer handler that spawns a rock    
def rock_spawner():
    global a_rock,change,direction,circle    
    change = [-random.random()*WIDTH,-random.random()*HEIGHT]
    direction = [(-random.random()*3+2)/2,(-random.random()*3+2)/2]
    circle = (-random.random()+0.5)/10
    a_rock = Sprite([WIDTH+change[0], HEIGHT+change[1]], direction, 0, circle, asteroid_image, asteroid_info)
    if started:
        if len(rock_group) <= 12:
            rock_group.add(a_rock)
    

    
# key handler that control the orientation of the spaceship

def key_handler1(key):
    global thrust
    if key == simplegui.KEY_MAP['left']:
        my_ship.angle_vel = -0.05
        my_ship.update()
    elif key == simplegui.KEY_MAP['right']:
        my_ship.angle_vel = 0.05
        if thrust == True:
            forward = angle_to_vector(my_ship.angle)
            my_ship.vel[0] += forward[0]
            my_ship.vel[1] += forward[1]
            my_ship.update()
    elif key == simplegui.KEY_MAP['up']:
        thrust = True
        
    elif key == simplegui.KEY_MAP['down']:
        thrust = True
    elif key == simplegui.KEY_MAP['space']:
        my_ship.shoot()
        missile_sound.play()
        
    
def key_handler2(key):
    global thrust
    if key == simplegui.KEY_MAP['left']:
        my_ship.angle_vel = 0
        my_ship.update()
    elif key == simplegui.KEY_MAP['right']:
        my_ship.angle_vel = 0
        my_ship.update()
    if key == simplegui.KEY_MAP['up']:
        thrust = False
        my_ship.update()
    elif key == simplegui.KEY_MAP['down']:
        thrust = False
        my_ship.update()
    
def restart_button():
    global lives,rock_group,missile_group,shipep_group,explosion_group,started,score
    lives = 3
    score = 0
    started = True
    rock_group=set()
    missile_group=set()
    shipep_group=set()
    explosion_group=set()
    soundtrack.rewind()
    soundtrack.play()
# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)
restart = frame.add_button("Restart", restart_button)
# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)
rock_group=set()
missile_group = set()
explosion_group = set()
shipep_group=set()
forward = angle_to_vector(my_ship.angle)
if started:
    soundtrack.play()

    
# register handlers
frame.set_draw_handler(draw)

timer = simplegui.create_timer(1000.0, rock_spawner)

frame.set_keydown_handler(key_handler1)
frame.set_keyup_handler(key_handler2)
frame.set_mouseclick_handler(click)
# get things rolling
timer.start()
frame.start()

