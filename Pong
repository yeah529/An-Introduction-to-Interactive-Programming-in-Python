# Implementation of classic arcade game Pong

import simplegui
import random
import math

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
paddle1_vel=[0,0]
paddle2_vel=[0,0]
paddle1_pos = [[0,HEIGHT/2-40],[0,HEIGHT/2+40],[8,HEIGHT/2+40],[8,HEIGHT/2-40]]
paddle2_pos = [[WIDTH-1,HEIGHT/2-40],[WIDTH-1,HEIGHT/2+40],[WIDTH-9,HEIGHT/2+40],[WIDTH-9,HEIGHT/2-40]]
mark = 0
score1 = 0
score2 = 0
DIR = LEFT

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    
    ball_pos = [WIDTH/2,HEIGHT/2]

    if direction == True:
       ball_vel = [random.randrange(120, 240)/60,-random.randrange(60, 180)/60]
    if direction == False:
       ball_vel = [-random.randrange(120, 240)/60,-random.randrange(60, 180)/60]

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2, speed  # these are ints
    global DIR
    speed = 1
    spawn_ball(DIR)
    
def draw(c):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel,mark,speed,DIR
    # draw mid line and gutters
    c.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    c.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    c.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]*speed
    ball_pos[1] += ball_vel[1]*speed
    
    ##if ball_pos[0] < BALL_RADIUS:
    ##    new_game()
    ##elif ball_pos[0] > WIDTH-1-(BALL_RADIUS):
    ##    new_game()
    
    if ball_pos[1] <= BALL_RADIUS or ball_pos[1] > HEIGHT-1-(BALL_RADIUS):
        ball_vel[1] = -ball_vel[1]
        
    if ball_pos[0] < BALL_RADIUS:
        if ball_pos[1] > paddle1_pos[3][1] and ball_pos[1] < paddle1_pos[2][1]:
            ball_vel[0] = -ball_vel[0]
            c.draw_line(paddle1_pos[3],paddle1_pos[2],10,"orange")
            speed = speed *1.1
        else:
            score2 += 1
            DIR = RIGHT
            new_game()
             
            
    if ball_pos[0] > WIDTH-1-(BALL_RADIUS):
        if ball_pos[1] > paddle2_pos[3][1] and ball_pos[1] < paddle2_pos[2][1]:
            ball_vel[0] = -ball_vel[0]
            c.draw_line(paddle2_pos[3],paddle2_pos[2],10,"orange")
            speed = speed*1.1
        else:
            DIR = LEFT
            new_game()
            score1 += 1
        
    # draw ball
    c.draw_circle(ball_pos,BALL_RADIUS,1,"yellow","white")
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos[1][1]>=HEIGHT-1 and mark ==1:
        paddle1_vel[1] = 0     
    elif paddle1_pos[0][1]<=0 and mark ==-1:
        paddle1_vel[1] = 0
    
    if paddle2_pos[1][1]>=HEIGHT-1 and mark ==1:
        paddle2_vel[1] = 0
    elif paddle2_pos[0][1]<=0 and mark ==-1:
        paddle2_vel[1] = 0
    
    
    if HEIGHT-1-paddle1_pos[1][1]<=paddle1_vel[1] and mark == 1:
        paddle1_vel[1] = HEIGHT-1-paddle1_pos[1][1]
    if paddle1_pos[0][1]-0 <= abs(paddle1_vel[1]) and mark ==-1:
        paddle1_vel[1] = -paddle1_pos[0][1]
    
    paddle1_pos[1][1] += paddle1_vel[1]
    paddle1_pos[2][1] += paddle1_vel[1]
    paddle1_pos[0][1] += paddle1_vel[1]
    paddle1_pos[3][1] += paddle1_vel[1]
    
    paddle2_pos[0][1] += paddle2_vel[1]
    paddle2_pos[1][1] += paddle2_vel[1]
    paddle2_pos[2][1] += paddle2_vel[1]
    paddle2_pos[3][1] += paddle2_vel[1]
    
    
    # draw paddles
    
    c.draw_polygon(paddle1_pos, 1, "white", "white")
    c.draw_polygon(paddle2_pos, 1, "white", "white")
    
    # draw scores
    c.draw_text(str(score1), (200, 60), 60, 'WHITE') 
    c.draw_text(str(score2), (360, 60), 60, 'WHITE')
def keydown(key):
    global paddle1_vel, paddle2_vel,mark
    if key == 40:
        paddle2_vel[1] += 4
        mark = 1
    elif key == 83:
        paddle1_vel[1] += 4
        mark = 1
    elif key == 38:
        paddle2_vel[1] -= 4
        mark = -1
    elif key == 87:
        paddle1_vel[1] -= 4
        mark = -1
def keyup(key):
    global paddle1_vel, paddle2_vel,mark
    if key == 38:
        paddle2_vel[1] += 4
       
    elif key == 87:
        paddle1_vel[1] += 4
        
    elif key == 40:
        paddle2_vel[1] -= 4
        
    elif key ==83:
        paddle1_vel[1] -= 4

def button_handler():
    global score1,score2
    score1 = 0
    score2 = 0
    new_game()
        
# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
restart = frame.add_button("Restart",button_handler,200)


# start frame
new_game()
frame.start()
